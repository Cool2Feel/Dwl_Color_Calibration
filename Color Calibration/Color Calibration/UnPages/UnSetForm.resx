<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAA5IAAAF2CAIAAACTWTD4AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAr5SURBVHhe7daxilVpFobhmXRmkknnGnruscGgG7yKyRoMpGgUBRUKA4M2UUQUKZMqimKQchTF
        LlFq9mo3JzDss7asD5+HxYFvRz+c5P3LNQAAGE+2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2
        AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2
        AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2
        AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2
        AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2
        AgAQQLYCABBAtgIAEEC2AgAQQLYCABBAtgIAEEC2AvQ7OTk5PT1dBwAdZCtAv8s/rAOADrIVoJ9sBWgn
        WwH6yVaAdrIVoJ9sBWgnWwH6yVaAdrIVoJ9sBWgnWwH6yVaAdrIVoJ9sBWgnWwH6yVaAdrIVoJ9sBWgn
        WwH6yVaAdrIVoNn169dlK0A72QrQ7ODgQLYCtJOtAM1kK8AWZCtAM9kKsAXZCtBMtgJsQbYCNJOtAFuQ
        rQDNZCvAFmQrQDPZCrAF2QrQTLYCbEG2AjSTrQBbkK0AzWQrwBZkK0C5+u+rV/5+pef+ceXnf/683Nff
        /9Rd/eHq+kSA75tsBShX/laN+ONffxx46xMBvm+yFaB8CcRf/vPL/vfrtV9//9/vb//79qvvf+JkK8CO
        bAUojYF48+bNy8vLi4uLde9BtgLsyFaAIlsBhpOtAEW2AgwnWwGKbAUYTrYCFNkKMJxsBSiyFWA42QpQ
        ZCvAcLIVoMhWgOFkK0BpDMRbt24t2frhw4d170G2AuzIVoDSGIh37txZsvXdu3fr3oNsBdiRrQBFtgIM
        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
        JR/0AAAAAElFTkSuQmCC
</value>
  </data>
</root>